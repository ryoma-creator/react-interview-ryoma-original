/* 問題1: 基本セレクタ
   - bodyに背景色 #f5f5f5 を設定
   - すべての段落(p)に文字色 #333 と行間 1.5 を設定
   - クラス 'highlight' を持つ要素に背景色 #ffff99 を設定
*/

body {
  background-color: #f5f5f5;
}

p {
  color:red;
  light-height: 1.5;
}

.highlight {
  background-color: #ffff99;
}

/* 問題2: IDセレクタ
   - ID 'section1' を持つ要素に上下のパディング 20px を設定
   - ID 'section3' を持つ要素に背景色 #e8f4f8 と角丸 8px を設定
*/

#section1 {
  padding: 20px, 0px;
}
#section3 {
  background-color: #e8f4f8;
  border-radius: 8px;
}

/* 問題3: 子孫セレクタと子セレクタ
   - navの中のすべてのリンク(a)に文字色 #0066cc を設定
   - .content-sectionの直接の子である段落にのみ、左側の余白 15px を設定
*/

nav ul li a {
  color: #0066cc;
}

.content-section: nth-child(1){
  margin-left: 15px;
}

/* 問題4: 擬似クラス
   - リンクにホバーしたときに文字色 #ff6600 と下線なしを設定
   - 入力フィールドがフォーカスされたときに、枠の色 #0066cc と外側の光彩(box-shadow) 0 0 3px #0066cc を設定
*/

hover: a {
  color : #ff6600 ;
  border: none;
}

input: focus {
  
}

/* 問題5: 擬似要素
   - 全ての見出し(h2)の前に "→ " という内容を追加し、文字色 #0066cc を設定
   - 全ての段落の最初の行に文字間隔 1px を設定
*/

/*  - 全ての見出し(h2)の前に "→ " という内容を追加し、文字色 #0066cc を設定 */
/* これは、文字列の追加だから、cssでできないんじゃないの？html, jsでやれってこと？ */
h2 {
  color: #0066cc ;
}

/* 段落っていうのはpのことをさっきから行っているの？ */
p: nth-child(1){
  letter-spacing: 1px;
}

/* 問題6: 隣接セレクタと属性セレクタ
   - h2の直後にある段落にのみ、文字を太字(font-weight: bold)に設定
   - type="email"属性を持つ入力フィールドにのみ、背景色 #e8f8e8 を設定
*/
h2 > p {
  font-weight: bold;
}

.element[email]{
  background-color:#e8f8e8;
}




/* 問題7: nth-child擬似クラス
   - .feature-listの奇数番目の項目に背景色 #f0f0f0 を設定
   - .feature-listの最後の項目に文字色 #0066cc と太字を設定
*/

/* nth-...わからないな、これ */

/* 問題2-2: 入力フィールドフォーカスで枠を青(
#0066cc)に */
input:focus { border: 2px solid red; }
これだけだと変わらない。

これ筆変えたいばあ、outline noneとかしないといけないんだっけ？

Edit

/* 問題2-3: リストの偶数番目に背景色(#f0f0f0)を設定 */
.list li:nth-child(odd) { background-color: #f0f0f0; }

このnthーchildって何？
liの要素の中の何番めかってことなんだろうけど

親要素のってことは、
必ず、．liっていう、今回の親要素を書かないといけないの？ってことは親要素と子要素の二つを書いて、初めて、nth ~childって使えるの？

/* 問題3-2: h1の直後のpに太字を設定 */

/* h1 + p { font-weight: bold; } */

あのさ、h1の直後っていうのはどういう意味？あと＋pってかくの？

てっきり、 >とか書いたような気がしたけど


text-align centerとかmargin  autoとか、中央にする系って何があったっけ？

それと、

/* 問題1-2: .box2に上下余白のみ15px */

.box2 { margin: 150px, 0px }

これさ、上下にしたい時って、最初のやつに数字入れて、2つめのやつは何も入れなければい、top bottomって省力してかけなかったっけ？

align-items: center;

これってなんだっけ？子要素の方を操作したい時だっけ？

あとgridって結構cssだとなんだろうtemplateとか書いているの見かけたけど、もっと楽にシンプルに数字だけとか書いて操作できないの？

marginの省略記法

あなたのコードの修正

css

/* ❌ 間違い */
.box2 { margin: 150px, 0px }

/* ✅ 正しい */
.box2 { margin: 15px 0; }つまり、0って書くときはpxを抜かないといけないってこと？


それと、
/* 問題1-1: .box1に内側余白20px、外側余白10px、境界線2px solid #333 */
.box1 { padding: 20px; margin: 10px; border: 20px solid #333; }
/* 問題2-1: .box1を幅300pxでborder含む全体幅に設定 */
.box1 { width: 300px; box-sizing: border-box; }
これ、box ~sizingを有りとなしで差をわかりたかったけど、これだとわかりずらい。どうしたらいい？
というか変化ないように見える。。どうしたらもっとわかるようになったかな？

/* 問題3-1: .box2に角丸10pxと影を設定 */

.box2 { border-radius: 10px; box-shadow: 3px 3px 15px red; }

box-shadowというのは、 3px 3px 15px red; この3つの数字はそれぞれどこの部分を指しているの？あと最後の、rGBだっけ？あれはなんだっっけ。どうしたらいいんだけ 000,3

/* 親コンテナを追加 */

.container {

  width: 300px;

  border: 2px solid red;

  background: yellow;

}

.box1 { 

  padding: 20px; 

  margin: 10px; 

  border: 2px solid #333;

  width: 300px;

  /* box-sizing: border-box; ← これを消すと */

}これを貼り付けたけど特に変わらないわ。

/* 色の書き方いろいろ */
box-shadow: 3px 3px 15px red;

この書き方で透明度をつけるのは？

box-sizingはなんで.containerっていう親要素があると変わるの？俺はてっきりbox1のみ、その中のサイズとか含む含まないっていうのを変えるだけだと思っていたが。

border-box: box1は300pxピッタリ → 親にフィット

親にフィットってことは、親に合わせるようにするってこと？関係ない？

* { margin: 0; padding: 0; box-sizing: border-box; }

この基本セットだけど、こんなふうにすれば、デフォルトとか、服含まないでできるから楽ってこと？例えば、height 100って書けば、そこから色々中身書いても、そこから膨張することないから、絶対100にできるから、はじめにこれを設定しておくと自分でサイズとか可視化しやすくなるってことかな？

<div class="container1">

  <div class="item">A</div>

  <div class="item">B</div>

  <div class="item">C</div>

</div>

<div class="container2">

  <div class="item">1</div>

  <div class="item">2</div>

  <div class="item">3</div>

</div>

<div class="container3">

  <div class="item">X</div>

  <div class="item">Y</div>

  <div class="item">Z</div>

</div>

/* 基本リセット */

* { margin: 0; padding: 0; box-sizing: border-box; }

/* 共通スタイル */

.container1, .container2, .container3 {

  height: 200px;

  margin: 20px 0;

  border: 2px solid #333;

}

.item {

  background-color: #4CAF50;

  color: white;

  padding: 20px;

  margin: 5px;

  text-align: center;

  font-weight: bold;

}

あのさ、この上記のコードだけど、特にwidth書いてないけど、横幅、画面いっぱいになっているのはなぜ？

margin 20pxで、上下の高さを幅を作っているのか。内部の。でも横幅はなんで画面いっぱいになっているの？

つまり、inlineの時は、width 100%ッテナッテナイカラ、逆に俺が今度は指定しないといけないのか。

そしてblockはその逆ってこと？heightを入れないといけない？

 /* 問題3-2: .container2の子要素を下寄せ */

/* .container2 { align-items: flex-end; } */

これさ、もっと明確に、align-itemsがわかるようにできないかな？そんなシチュエーション作れる？子要素もflex使って操作するのか。直接、flexって書いて操作すればいいのに、なんで、その小要素用のコードあるのかメリットがよくわからない。

いまいち、親要素もflex使って、そこから子要素のをa lineーitemsを使うメリットがよくわからない　

/* 基本リセット */

* { margin: 0; padding: 0; box-sizing: border-box; }

/* 共通スタイル */

.container1, .container2, .container3 {

  height: 200px;

  margin: 20px 0;

  border: 2px solid #333;

}

.item {

  background-color: #4CAF50;

  color: white;

  padding: 20px;

  margin: 5px;

  text-align: center;

  font-weight: bold;

}

/* === 問題1: 基本のFlexbox === */

/* コメントアウトを解除して練習 */

/* 問題1-1: .container1をflexコンテナにして横並びに */

.container1 { display: flex; }

/* 問題1-2: .container2をflexコンテナにして縦並びに */

.container2 { display: flex; flex-direction: column; }

/* === 問題2: justify-content（面接頻出）=== */

/* 問題2-1: .container1の子要素を中央寄せ */

/* .container1 { justify-content: center; } */

/* 問題2-2: .container1の子要素を両端寄せ */

.container1 { justify-content: space-between; }

/* 問題2-3: .container1の子要素を等間隔に配置 */

.container1 { justify-content: space-around; }

/* === 問題3: align-items === */

/* 問題3-1: .container2の子要素を垂直中央寄せ */

.container2 { align-items: center; }

/* 問題3-2: .container2の子要素を下寄せ */

/* .container2 { align-items: flex-end; } */

/* === 問題4: flex-grow, flex-shrink === */

/* 問題4-1: .container3の2番目の子要素のみ伸縮させる */

.container2 .item:nth-child(2) { flex-grow: 1; }

これさ、問題4-1だけど、flex ~grow1ってやってもなんも変化ないんだよね。

何がいけないかな？grow 1ってなんだ？残りのスペース分の日だと思うんだけど。

たとえば、container2のnthーchild(2)ってやってみたけどそれでも伸びないのよ。よくわからない。

stretchなくてもdiv要素なら、勝手にwidthがblockだから100%になっているから伸びるのか？

<div class="parent">

  <div class="child1">子要素1</div>

  <div class="child2">子要素2</div>

  <div class="child3">子要素3</div>

</div>

<div class="display-demo">

  <span class="inline">インライン</span>

  <div class="block">ブロック</div>

  <span class="inline-block">インラインブロック</span>

  <div class="hidden">非表示</div>

</div>

/* 基本リセット */

* { margin: 0; padding: 0; box-sizing: border-box; }

/* 共通スタイル */

.parent {

  height: 300px;

  border: 2px solid #333;

  margin: 20px 0;

  position: relative;

}

position relativeってなんだっけ？これで何かを固定して、ここからablsoluteって書いたやつを。。。忘れちゃった。わかりやすく、visualでシンプルにわかるようにかける？

文字数少なくてもパッとわかりやすく。

topとか rightとか書いたよね。親要素にまずrelativeってつけてそこからどう動く仕組みなんだっけ？矢印とかも書いて見せてくれる？どっち向きに動くものだ？

topって書くと、下がる感じだ。でも、これはどこを基準でスタートするんだ？ソレガワカリズライ。

<div class="parent">

  <div class="child1">子要素1</div>

  <div class="child2">子要素2</div>

  <div class="child3">子要素3</div>

</div>

<div class="display-demo">

  <span class="inline">インライン</span>

  <div class="block">ブロック</div>

  <span class="inline-block">インラインブロック</span>

  <div class="hidden">非表示</div>

</div>

/* 問題1-1: .child1を相対位置で上から20px、左から20px移動 */

.child1 { position: relative; top: 10px;  }

/* 問題1-2: .child2を絶対位置で右上角に配置 */

/* .child2 { position: absolute; top: 0; right: 0; } */

今ここを試しにやっているんだが。

なるほど。

これよく忘れるから助かる。postionのabsoluteとrelativeのやつ。これってどういう時によく重宝するの？

/* 問題1-1: .child1を相対位置で上から20px、左から20px移動 */

/* .child1 { position: relative; top: 10px;  } */

/* 問題1-2: .child2を絶対位置で右上角に配置 */

/* .child2 { position: absolute; top: 0; right: 0; } */

あとこれ。絶対１と相対いちって書いてあるけど何が違うの？これもパッとわかるように。

もしかしてこれ、pxって書くと移動できるけど、

pxで書かないと、まるでxとyの時のようにどこの位置に置くのか配置できるってことか。

これが絶対と相対の違い？この言葉が分かりずらい。分かりやすくいうとどういう意味？

<div class="parent">

  <div class="child1">子要素1</div>

  <div class="child2">子要素2</div>

  <div class="child3">子要素3</div>

</div>

これの偶数、もしくは奇数のみにbgカラーを入れて変えたい場合、nth-childってどう書けばよかったっけ？

それと、

/* 問題1-3: .child3を絶対位置で中央に配置 */

.child3 { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); }

これをやっても機能しないや。これ覚える必要ある？それとなんでこれは動かないんだ？

<div class="parent">

  <div class="child1">子要素1</div>

  <div class="child2">子要素2</div>

  <div class="child3">子要素3</div>

</div>

これには.childってないけど、どこに.childってつければいいの？それとも話がこれだとかわる？

この方法は中央配置の定番なので覚える価値あり。現代ではdisplay: grid; place-items: centerの方が簡単ですが。

これでいいよね。。覚えなくていいかもね。

この方法は中央配置の定番なので覚える価値あり。現代ではdisplay: grid; place-items: centerの方が簡単ですが。

でもこの場合、gridの場合も、relativeが先に必要なの？relativeの時点で、親要素が必要なのが確定するけど。

.parent > div:nth-child(even) { background: red; }

nth-childというのは同じ要素の兄弟があるもののみ使えるの？

.parent > div:nth-child(even) { background: red; }

こんな感じで、div:っていうのはたまたま、ここではdivが複数あるけど、そうでない場合もあるでしょ？

nth-child は要素の種類に関係なく、兄弟要素の中での順番で判定します。

これはどういう意味？例えば、divとか同じ親の子要素に、liとかulとか他の要素があった場合、そいつらは兄弟になるの？それともdivならdiv？

/* 問題2-1: spanをブロック要素にする */

.inline { display: block; }

あのさ、blockっていうのは、勝手にデフォルトでwidth100%なんだよ？でもblockにした途端、widthがなくなったよ？説明がおかしくない？

いや、いいのか。widthが広がった

あのさ、inlineとblockとinline blockの違いって何だっけ？

分かりやすくパッとわかるので。visualでもお願い。

/* 問題2-3: spanをインラインブロック要素にする */

.inline-block { display: inline-block; width: 100px; height: 50px; }

  <span class="inline-block">インラインブロック</span>

この問題おかしいよね？inline-blockのものをinlin blockにしている。

そうでもない？spanだからinlineか。

inline blockって見た目はinlineなのか？なんだろう。見分けがつかなくなってきた。

あのさ、

/* 問題3-1: .child2を最前面に表示 */

.child2 { z-index: 100; }

これで最前列にしようとしているけどならない。なんで？

それと、これって数字が高ければ優先されるんでしょ？だったら、１でもいいの？

inline（横並び、サイズ指定不可）

inline1 inline2 inline3

特徴：横並び、width/height無効

inlineってそもそもサイズ指定不可なの？inlineっていうのはspanとかaタグか。でもこれってもっとaタグとか広くした時とかあるよね？widthどうするの？その時？

inline-block（横並び、サイズ指定可能）

inline-block1 inline-block2 inline-block3

特徴：横並び、width/height指定可能

inline-blockにわざわざ変えるってこと？

これって、reactの時に、cssでやったっけ？react以降であまりみてない気がするんだが。

z-indexが効かない理由

z-indexはpositionが設定された要素にのみ有効です：

css

/* ❌ 効かない */
.child2 { z-index: 100; }

/* ✅ 効く */
.child2 { position: relative; z-index: 100; }

z-indexの数値

数値が高いほど前面に表示されます。z-index: 1でも他の要素より高ければOKです。

ん？どういうこと？position:relativeって書かないとダメだったってこと？

親要素の方にはrelativeって書いてあるけど。absoluteはこの場合、子要素の.child２には書かないでいいの？よくわからんくなってきた。そもそもなんで、absoluteやrelativeが必要なのか。サクッと説明できる？

.child2 { z-index: 100; }

これが回答だったけど、これが間違っていたってこと？

/* === IBM面接でよく聞かれる質問 === */

/*

Q: positionのstatic, relative, absolute, fixedの違いは？

A: static→通常配置、relative→元位置から相対移動、

   absolute→親要素基準、fixed→viewport基準

これよくわからない。どういうこと？

inline要素のサイズ指定

aタグを広くしたい場合：

inlineは、高さも変更できないの？

z-indexとposition

z-indexはposition: static以外が必要です：

css

/* ❌ 効かない（デフォルトはstatic） */
.child2 { z-index: 100; }

/* ✅ いずれかが必要 */
.child2 { position: relative; z-index: 100; }
.child2 { position: absolute; z-index: 100; }
.child2 { position: fixed; z-index: 100; }
いずれかっていうのはどういうこと？どれでもいいの？
判断基準がわからない。

positionってやれば、static以外はレイヤーかするのか。なんかイメージでわかるように描ける？

Day 5: レスポンシブ & メディアクエリ

 イメージがないんだが。
image/* === 問題2: レスポンシブ画像 === */

/* 問題2-1: 画像を親要素に合わせて縮小 */
/*
img {
  max-width: 100%;
  height: auto;
}
*/

html上に。それと、gridレイアウトは覚える必要あるのか？複雑なんだが。

grid-template-areas:
ってどういう意味？
 grid-template-columns:
columnsっていうのもあるし。それに、1frとかpっ側ないの？わかりずらい。
grid嫌いになりそう。

/* 問題1-2: 480px以下でフォントサイズを小さく */

@media (max-width: 480px) {
  .header, .nav, .main, .sidebar, .footer {
    font-size: 14px;
    padding: 10px;
  }
}
これ問題だとフォントサイズを小さくしか書いてないよ。これだったら*で良くない？＊使ってさ。


/* === 問題3: Flexboxでレスポンシブ === */

/* 問題3-1: カードを小画面で1列表示 */
/*
@media (max-width: 600px) {
  .responsive-grid {
    grid-template-columns: 1fr;
  }
}
*/
flex boxでresponsiveって問題に書いてあってなんでgridで答えているの?



* === 問題4: viewport単位 === */

/* 問題4-1: ヘッダーを画面幅いっぱいに */
/*
.header {
  width: 100vw;
  height: 10vh;
}
*/
10vhって何？

なんでこれで画面幅いっぱいなの？
これだけど、gridを交えた方が実務では早いの？効率的なの？正直grid織り交ぜながらflexbox使うのとか初めて見た。

段階的によく行う順序で、website作るとしたら、サラッとやったらどうなるかな？
やればウェブサイトはどのウェブサイト作ってもこれしっとけば手順や容量ばっちりの汎用性抜群のやつで、コーディング手でも抜群の記憶力持ってさっさと高得点取れるやつで

gridは基礎からやらんとわからんかも
gridってどういう時に使うの？なんでこいつをflex通り混ぜると効果的になるの？flexだけじゃ作れないの？grid基礎から超絶簡単にここ抑えとけばわかるってやつ教えてくれない？意味がわからなくて
Grid基礎これだけ:
これだけ覚えればいい？ようは構造を作って中身のパーツはflexでやるのが早いってこと？
普通、reactならパーツの組み合わせだから、grid使わないのかな？vanilaの時は使うのか？

griddisplay: grid
* grid-template-rows: auto 1fr auto （ヘッダー/メイン/フッター）
* min-height: 100vh
* これがそれぞれ何を指しているのかわからんって・・長いよ。
auto 1fr auto → ヘッダー（必要分）、メイン（残り全部）、フッター（必要分）
これそれぞれ何を意味していて、なんでこれがヘッダーとかメインとかフッターなの？htmlでもclassか要素で書いておかないと下準備しておかないといけないとかあるの？
 gridはなんでそんな簡単なのだ。。

<header>ヘッダー</header> ← 1番目 = auto（必要分だけ） <main>メイン</main> ← 2番目 = 1fr（残り全部） <footer>フッター</footer> ← 3番目 = auto（必要分だけ）
子要素を上から順にどうするかのオーダーを書いていたってこと？autoとか1frって何？効果がわからないよ。基礎からちゃんと説明して。さっきから省きすぎだろ。
visualも使って見せて欲しい。
✅ Grid適用
ヘッダー（少ないテキスト）
メイン（残りスペース全部を使用！）
フッター（少ないテキスト）

これでも、flex stretchとか、flexの１？とか残り全部のスペース取るやつとかで同じことできそうだよね？
grid-templateっていうのは何？決まり文句？覚えづらいな。。.templateっていうのが
どういう意味？

 auto 1fr auto;これは？子要素の上からってこと？
1frってことは２f rとか１０frとかもあるってこと？

 visualで見たらわかりやすいわ。

でも、flex boxじゃできないの？でもサイズの指定までできるのか。grid-template-rows: 50px 200px 50px;
確かにこれはflexだとできなかったかな？rowsはcolumとかflexみたいにあるの？

frって何？そもそも。どういう意味？難しく考えなくていいのかな？frってgridにのみ出てくるよね？

ああ、比率か。これでどれくらいか決まるのか。
grid-template-rows: 10fr 30fr 10fr;
これ書くなら、１fr ３fr １frの方が効率いいのか。
grid-template-columns: auto 1fr auto; / 横方向の設計図 /
rowが横でしょ？columnは柱だから縦でしょ？それともflexとは違うの？

そもそもflexとgridはなんで必要になってできたんだ？どっちが先に生まれたんだろ？

reactでもgridつかうの？こっちの方がいい？簡単なの、もしそうなら見せてくれる？

rows vs columns（ここ混乱しやすい）:

css

grid-template-rows: 1fr 2fr;     /* 縦方向（上下）*/
grid-template-columns: 1fr 2fr;  /* 横方向（左右）*/
わかりずらいから、こういうのはvisualにして

gridって2017にできたの？割と最近だな。。

    <div style={{
      display: 'grid',
      gridTemplateRows: 'auto 1fr auto',  // ヘッダー/メイン/フッター
      minHeight: '100vh',
      fontFamily: 'Arial, sans-serif'
    }}>

reactのgridって普通のvanila?の時のcssと同じコード？
キャメルケースになっている気がするんだけど

 gridTemplateRows: 'auto 1fr auto',  // ヘッダー/メイン/フッター
これ指定がないからわかりずらいけど、要は大枠をdivで下準備で作って、その小要素に対してこいつを使って比率を決めていくんだよね？
selectorみたいに指定しないからわかりずらいな。だとすると、子要素は3つで確定させないと、3つの指示がうまくいかなくなるよね？仮に4つ目があったらどうなっちゃうの？エラーになるの？

まじか、、現代のブレークポイント（2024-2025年） - 新しい標準ブレークポイント: 480px(現代スマホ), 768px(タブレット), 1024px(ラップトップ), 1366px(デスクトップ) Breakpoints for Responsive Web Design in 2024 +3。以前の480pxは古い情報でした。CSS基礎復習 - 2025年版（実践的Web制作）Code 
以前のやつ、このgridの旨みというか全体像を組むので適しているってところ、ちゃんとここを俺が速習できるように問題組んでいるよね？

-columns

なんでcolumじゃなくてcolumnsっていうふうにnがつくのだろう？

レスポンシブでもgrid対応で超絶簡単になるの？効率的に？コーディングテストで出るかね。。

6. 2025年版練習問題について: はい！Gridの「全体構造作り」の旨味を速習できるよう設計しています。特に：

grid-template-rows: auto 1fr auto でページ構造一発完成

ここは最初俺がつくるんだよね？

gridはここまでかな？大事なところは？ここまでのcssを抑えれば異コーディングテストというか、エントリーする上では十分？

/* この1行でレスポンシブ完成！ */ grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));

あれ、？repeatって何？これ書くの？さっきまでautoとか数字だけで比率書いて終わりでシンプルだったじゃん？何これ？わかりずらいな。。

問題の方もちゃんとわかりやすい方から解くように作ってあるよね？そうじゃないなら修正してよ。

auto fitとか知らんわ。何これ？

minmax(250px, 1fr)これも何？最大でここまでって指定ができるってこと？

250pxと１frってどっちが優先されるの？

🔥 Grid魔法バージョン

カード1

カード2

カード3

カード4

.magic-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; } /* メディアクエリ不要！自動でレスポンシブ！ */

この場合、子要素はなんだったの？

3. コーディングテストで出る？

IBM等で実際に出題される内容： ✅ 「レスポンシブなカード配置を作成してください」 ✅ 「ヘッダー・メイン・フッター構造のページを作成」 ✅ 「画面サイズに応じて列数が変わるレイアウト」 Grid知ってると： • 1行で解決（他の人は数十行） • メディアクエリ不要 • 面接官も「おっ」となる

まじかい。じゃあ、これ解けるための問題、さっきのやつに作ってあった？なければ入れておいてね　コードを書く方ね。

覚えるべきGrid基礎（これだけ！）

/* ページ構造 / display: grid; grid-template-rows: auto 1fr auto; min-height: 100vh; / レスポンシブカード */ display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px;

この2パターンで90%のレイアウトが完成！ エントリーレベルのコーディングテストには十分すぎる武器です。

ナイス

  align-items: center;って何？

background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);

（）ないだけどもっと簡単に覚えられそうなのある？

 transition: background 0.3s ease;

これってなんだっけ？transitiontて。

grid templateって決まり文句？

  aligh-items: center;ttenanndakke?

1remとか2remとかREMってどれくらい？pxで習ってきたけどこっちで習った方がいいの？


