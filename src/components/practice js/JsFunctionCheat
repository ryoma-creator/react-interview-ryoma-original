// パターン1: if-else による明示的な条件分岐
if (counts[key]) {
  counts[key]++;
} else {
  counts[key] = 1;
}

// パターン2: || 演算子を使った短縮形
counts[key] = (counts[key] || 0) + 1;

// パターン3: 三項演算子を使った形
counts[key] = counts[key] ? counts[key] + 1 : 1;


-
おっしゃる通り、この2つのパターンは確かに混乱しやすいです。基本的には別の考え方ですが、もう少し掘り下げて説明しましょう。
通常のswitch文とswitch(true)の違い
1. 通常のswitch文
switch (変数) {
  case 値1:
    // 処理
    break;
  case 値2:
    // 処理
    break;
}
これは「変数が値1と等しいか？値2と等しいか？」と 「値の一致」を見ています。つまり内部では 変数 === 値1 という比較が行われています。
2. switch(true)パターン
switch (true) {
  case 条件式1:
    // 処理
    break;
  case 条件式2:
    // 処理
    break;
}
これは「条件式1がtrueになるか？条件式2がtrueになるか？」と 「条件式の結果」を見ています。内部では true === (条件式1の結果) という比較が行われています。
なぜ混乱するのか？
混乱する原因は明確です：

通常のswitchは「値の一致」を見る
switch(true)は「条件式の結果」を見る

しかも条件式をcase側に書くという形が直感的でないため、混乱しやすいんです。
なぜswitch(true)という書き方があるのか？
これはのswitch文の仕様を利用したテクニックです。実はswitch-caseでは、switch内の式とcaseの値を===（厳密等価演算子）で比較します。
したがって：

switch(true) { case (x > 5): } は true === (x > 5) を評価
(x > 5) がtrueなら、caseが実行される

これはif-elseを代替する方法として使われることがあります。特に複数の条件分岐がある場合に、switch文の方が見やすい場合もあるためです。
統一的な考え方はある？
実は両方とも「値の比較」という点では同じです：

通常のswitch: switch(変数) → 変数 === 値 が一致するか比較
switch(true): switch(true) → true === 条件式の結果 が一致するか比較

つまり、どちらも「===」で比較しているということが共通点です。ただ、2番目のパターンでは条件式の結果（trueまたはfalse）を比較しています。
実務では通常のswitchの方がよく使われ、switch(true)パターンは特殊なケースでのみ使用されることが多いです。if-elseで十分に表現できる場合は、多くの場合if-elseを使う方が読みやすいでしょう。

-
; // 基本構文
; try {
;   // エラーが発生する可能性のあるコード
; } catch (error) {
;   // エラーが発生した場合の処理
; } finally {
;   // エラーの有無にかかわらず必ず実行される処理（省略可能）
; }

; // catch内の変数名は任意に設定可能
; try {
;   // コード
; } catch (err) {  // 「err」という名前
;   console.log(err.message);
; }


; // エラーオブジェクトの主なプロパティ
; try {
;   // わざとエラーを発生させる
;   throw new Error("これはテストエラーです");
; } catch (error) {
;   console.log(error.message);  // "これはテストエラーです" - エラーメッセージ
;   console.log(error.name);     // "Error" - エラーの種類
;   console.log(error.stack);    // エラーのスタックトレース（発生場所の詳細情報）
; }


try {
  // コード
} catch (myError) {  // 「myError」など任意の名前を付けられる
  console.log(myError.message);
}
error.message についてですが、のエラーオブジェクトは標準で message プロパティを持っています。

; この仕組みを知らないとエラー処理の問題は解けないですね。
; コーディングテストではこのような言語の基本機能の理解も求められることが多いです。

エラーが発生すると、エンジンがこのプロパティにエラーの説明文を設定します。
これは言語仕様の一部なので、すべてのエラーオブジェクトが持っています。
エラーオブジェクトは Error クラスから作られるオブジェクトで、以下のようなプロパティを持っています：

message: エラーメッセージ
name: エラーの種類
stack: エラーが発生した場所の情報

これらはの標準的な仕組みなので、自分でチェックする必要はありません。
catch ブロックで捕まえたものは必ずエラーオブジェクトになります。

-------------Easiest Basic Level-------------

まずはレベルを下げた問題から始めましょう。一歩ずつ進めていきます。

## 基礎レベル問題1: 文字列の最初の文字を取得する
文字列を受け取り、その最初の文字を返す関数を作成してください。

```
入力例: "Hello"
出力例: "H"
```

これは文字列の基本的なアクセス方法を確認する問題です。

試しに解いてみてください。

## 基礎レベル問題2: 配列の合計
数値の配列を受け取り、合計値を返す関数を作成してください。

```
入力例: [1, 2, 3, 4, 5]
出力例: 15
```

## 基礎レベル問題3: 特定の文字数をカウント
文字列と探したい文字を受け取り、その文字が何回出現するかをカウントする関数を作成してください。

```
入力例: countChar("hello", "l")
出力例: 2
```








-------------Questions

基礎レベル問題1: 文字列の最初の文字を取得する
文字列を受け取り、その最初の文字を返す関数を作成してください。
入力例: "Hello"
出力例: "H"
これは文字列の基本的なアクセス方法を確認する問題です。
文字列の特定の位置の文字にアクセスするには、添付資料にもあるように、
charAt(0) または 文字列[0] のように書きます。

問題1: 母音カウンター
function countVowels(str) {
  // 母音の配列を作成
  const vowels = "aeiou".split('');
  
  // 文字列を小文字に変換して配列にする
  const chars = str.toLowerCase().split('');
  
  // filter メソッドで母音だけを抽出して、その長さを返す
  const vowelsOnly = chars.filter(char => vowels.includes(char));
  
  return vowelsOnly.length;
}

// テスト
console.log(countVowels("Hello World")); // 3
このコードでは：

母音を配列として定義
文字列を小文字に変換して配列に分割
filterで母音だけを抽出し、その長さを返す

charsについて：

charsは入力された文字列を1文字ずつの配列に変換したものです
例えば "Hello World" → ["h","e","l","l","o"," ","w","o","r","l","d"]


let vs const：

constは再代入できない変数を宣言します（中身は変更可能）
この問題では、各変数は一度定義したら再代入しないのでconstで問題ありません
一般的に、変更しない変数はconst、後から再代入する変数はletを使います

母音のリスト表示：

母音の数だけでなく、どの母音かも表示したい場合は、以下のように修正します：

function countVowels(str) {
  const vowels = "aeiou".split('');
  const chars = str.toLowerCase().split('');
  const vowelsOnly = chars.filter(char => vowels.includes(char));
  
  return {
    count: vowelsOnly.length,
    foundVowels: vowelsOnly
  };
}

return { count: vowelsOnly.length, foundVowels: vowelsOnly }; について
そのとおりです。この書き方でオブジェクトを返すことで、複数の値を同時に返せます。
例えば以下のように使います：
const result = countVowels("Hello World");
console.log(`母音の数: ${result.count}`); // 母音の数: 3
console.log(`見つかった母音: ${result.foundVowels}`); // 見つかった母音: e,o,o
関数から複数の値を返したい場合は、このようにオブジェクトにまとめるのが一般的なパターンです。

const result = countVowels("Hello World");

関数を、変数へ入れて、その変数名から、return先の、objectのkeyを書くってこと？
🔻
はい、おっしゃる通りです。関数から返されたオブジェクトを変数（この場合はresult）に格納し、
そこからresult.countやresult.foundVowelsのようにアクセスします。
これはオブジェクトのキーを使ってプロパティにアクセスする標準的な方法です。


-------------Questions

問題2: 配列の重複除去
数値の配列を受け取り、重複を除いた新しい配列を返す関数を作成してください。
入力例: [1, 2, 2, 3, 4, 4, 5]
出力例: [1, 2, 3, 4, 5]


問題2: 配列の重複除去
function removeDuplicates(arr) {
  // Set を使って重複を排除
  const uniqueSet = new Set(arr);
  
  // Set を配列に変換
  return Array.from(uniqueSet);
  
  // 別の方法: return [...uniqueSet];
}

// テスト
console.log(removeDuplicates([1, 2, 2, 3, 4, 4, 5])); // [1, 2, 3, 4, 5]
このコードでは：

Setオブジェクトを使用（Setは重複を許さないコレクション）
配列からSetを作り、それを再び配列に変換

別の方法（filterを使う）：
function removeDuplicates(arr) {
  return arr.filter((value, index, self) => {
    return self.indexOf(value) === index;
  });
}


new Set()について：

Setは重複を許さないコレクションです
new Set([1, 2, 2, 3])は自動的に{1, 2, 3}になります（重複が除去される）


Array.from()について：

Array.from()は反復可能なオブジェクト（SetやMapなど）を配列に変換します
Array.from(new Set([1, 2, 2, 3]))は[1, 2, 3]になります



-------------Questions

基礎レベル問題3: 特定の文字数をカウント
文字列と探したい文字を受け取り、その文字が何回出現するかをカウントする関数を作成してください。
入力例: countChar("hello", "l")
出力例: 2
これは文字列を一文字ずつ調べる問題です。forループを使ったり、splitして配列にしてからfilterを使ったりする方法があります。


問題3: ドメイン集計
function countDomains(emails) {
  // 結果を格納するオブジェクト
  const domainCount = {};
  
  // 各メールアドレスを処理
  emails.forEach(email => {
    // @ 以降の部分を取得
    const domain = email.slice(email.indexOf('@') + 1);
    
    // ドメインがすでに存在すれば加算、なければ1を設定
    if (domainCount[domain]) {
      domainCount[domain]++;
    } else {
      domainCount[domain] = 1;
    }
  });
  
  return domainCount;
}

// テスト
const emails = ["user1@gmail.com", "user2@yahoo.com", "user3@gmail.com", "user4@outlook.com"];
console.log(countDomains(emails));
// { "gmail.com": 2, "yahoo.com": 1, "outlook.com": 1 }
このコードでは：

結果を格納するための空オブジェクトを作成
各メールアドレスをforEachでループ処理
indexOf('@')とsliceを使って@以降のドメイン部分を抽出
オブジェクトにドメインをキーとしてカウントを記録

++演算子：

++は変数の値を1増やす演算子です
count++はcount = count + 1と同じ意味です

別の方法（reduceを使う）：
function countDomains(emails) {
  return emails.reduce((acc, email) => {
    const domain = email.slice(email.indexOf('@') + 1);
    acc[domain] = (acc[domain] || 0) + 1;
    return acc;
  }, {});
}

