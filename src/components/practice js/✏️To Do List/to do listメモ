
2025 May 26
const id = button.dataset.id;  // "123"が取れる

これってto do listの時だけ重要？それともformとか検索するときに必要になるか？
idで調べるなら、必要かもしれないが、検索用語で調べるなら、フィルターの仕方が違うか。？

            <button data-id="${item.id}">削除</button>
        `;
        
        // ↓この新しく作ったボタンにイベント設定
        const deleteButton = div.querySelector('button');
ここよくわからない。div出たどってbuttonで指定しているけど、他のhtml上で同じものがあったとしたら、どうなるの？


divからbuttonを探す

そのdivの中のbuttonだけ取得します！

javascript

// 新しく作ったdivの中のbuttonだけ
const deleteButton = div.querySelector('button');

他のbuttonは関係ありません。 そのdivの範囲内だけ探します。

そのdivのっていうのはどうして？さっきのdivって書いただけで、なんで特定のdivだけを指定できた？それがわからない。

divからbuttonを探す
そのdivの中のbuttonだけ取得します！

javascript
// 新しく作ったdivの中のbuttonだけ
const deleteButton = div.querySelector('button');
他のbuttonは関係ありません。 そのdivの範囲内だけ探します。

そのdivのっていうのはどうして？さっきのdivって書いただけで、なんで特定のdivだけを指定できた？それがわからない。

更新（Update）の問題も作りましょうか？
うん、お願い。to do listの考え方で重要なのは、日々、慣らしておきたいから
すぐできそうな感じで大事な考え方をキープしたい

return items.push(newItem); // ❌ pushは配列の長さを返す

配列の長さって.lengthでしょ？

React でも同じ考え方です！

javascript

setTodos([...todos, newItem]);  // 新しい配列を作る
reactでも、 items.push(newItem);
これでsetTodosへは追加できないの？

/*

問題1: 配列への追加（Create）

新しいアイテムを配列に追加する

*/

function addItem(items, newItem) {

  // ここにコードを書いてください

  return [...items,newItem];

}

// テスト

let todos = ['買い物', '勉強'];

console.log(addItem(todos, '運動')); // ['買い物', '勉強', '運動']

これでもエラー？もしかして、

/*

問題1: 配列への追加（Create）

新しいアイテムを配列に追加する

*/

function addItem(items, newItem) {

  // ここにコードを書いてください

  return [...items,newItem];

}

// テスト

let todos = ['買い物', '勉強'];

console.log(addItem(todos, '運動')); // ['買い物', '勉強', '運動']

/*

問題2: IDで削除（Delete）

IDが一致するアイテムを削除

*/

function deleteById(items, id) {

  // ここにコードを書いてください

}

// テスト

let items = [{id: 1, text: '買い物'}, {id: 2, text: '勉強'}];

console.log(deleteById(items, 1)); // [{id: 2, text: '勉強'}]

/*

問題3: 検索フィルター（Read）

キーワードを含むアイテムを検索

*/

function searchItems(items, keyword) {

  // ここにコードを書いてください

}

// テスト

let todos = ['買い物リスト', '勉強計画', '買い物予算'];

console.log(searchItems(todos, '買い物')); // ['買い物リスト', '買い物予算']

これ問題としてjsに全部貼っているけど、

todosっていうのが同名でたくさん定義されたことになっているのか？

/*

問題2: IDで削除（Delete）

IDが一致するアイテムを削除

*/

function deleteById(items, id) {

  // ここにコードを書いてください

  return items.filter(item => item.id !== id);

}

// テスト

let items = [{id: 1, text: '買い物'}, {id: 2, text: '勉強'}];

console.log(deleteById(items, 1)); // [{id: 2, text: '勉強'}]

/*

これは間違い？

/*
問題3: 検索フィルター（Read）
キーワードを含むアイテムを検索
*/
function searchItems(items, keyword) {
  // ここにコードを書いてください
  return items.filter(item => item.includes(keyword));
}

// テスト
let todos = ['買い物リスト', '勉強計画', '買い物予算'];
console.log(searchItems(todos, '買い物')); // ['買い物リスト', '買い物予算']

/*

問題4: IDで更新（Update）

IDが一致するアイテムのtextを新しい値に更新

*/

function updateById(items, id, newText) {

  // ここにコードを書いてください

  return items.forEach(item => item.id === id ? {id: item.id, text: newText} : item);

}

// テスト

let items = [{id: 1, text: '買い物'}, {id: 2, text: '勉強'}];

console.log(updateById(items, 1, '買い物完了')); 

// [{id: 1, text: '買い物完了'}, {id: 2, text: '勉強'}]

これじゃダメかな？

考え方は、ようは、配列の中の個別のものにアクセスするから、配列メソッドをまず使う、

今回はfilterじゃんなくて条件分岐したいから、無難にforEach選ぶ。

次に、idがもし同じなら、さっきのidの場所へ、新しいテキストを値として入れる

もしそうじゃないなら、そのまま返す。だから、ここでは, 配列メソッドのparameterをおいて、そのobjectを返すようにする。

でもこれじゃエラーになるんだ。なんでだ？

あとは、addの時に、objectを作ったでしょ？

あれも作る練習したい。何を入れればいいか忘れちゃうからさ。

そのあと、何を消したほうがいいとかさ。

確かローディングとかそういうのもあったでしょ？text消しておいたほうがいいとか。

to do listの時はあるっけ？

input.value.reset()で入力をリセットするのをどこかのタイミングでやっておいたほうがいいとかか？

それと、datasetだっけ？data-idとかも作ってついでに、削除ボタン作るところとかさ。

でも色々あって、どうやって分野別にしようか。day1はCRUDにしようか。検索入れチャッtけど。他のもdayごとに分けるとしてどうするのがいいかな？

それと、これ待違っている？

これはなんの練習？

/*

問題5: 配列の要素数をカウント（基本操作）

条件に一致する要素の数を数える

*/

function countCompleted(items) {

  // completedがtrueのアイテム数を返す

  return items.fitler(item=> item.completed).length;

}

// テスト

let todos = [

  {id: 1, text: '買い物', completed: true},

  {id: 2, text: '勉強', completed: false},

  {id: 3, text: '運動', completed: true}

];

console.log(countCompleted(todos)); // 2

📚 分野別の整理案

Day1: CRUD基本

配列への追加（オブジェクト作成含む）

IDで削除

IDで更新

検索フィルター

条件カウント

上記は今までやったもの？問題5までの？？追加必要？

ok　次やってみようか。

それぞれ。

どの分野から優先して練習したいですか？

もしコーディングテストあったら、どういう順序でやっていくのがいいのかな？順序順で覚えていきたいけど。

crudの前にまず何か作るのあった？let items =[];のまず一番大事な箱を作って、次にDOMContentLoadedとかかな？これないと始まらないもんね。

ここへ色々関数へ入れていくっていう、その考え方もわかるようにしたい。

forEachについて

forEach は「表示」や「副作用」で使います！

javascript

// ✅ DOM操作（表示）で使う
items.forEach(item => {
    const div = document.createElement('div');
    div.innerHTML = item.text;
    todoList.appendChild(div);  // 画面に追加
});

// ❌ returnが必要な処理では使わない
return items.forEach(...);  // undefinedが返る

これがよくわからんのよね。。要するにどこで使うんだ？表示の時だけって覚えれば、間違いなくなるかな？

📚 分野別の整理案

Day1: CRUD基本

配列への追加（オブジェクト作成含む）

IDで削除

IDで更新

検索フィルター

条件カウント

上記は今までやったもの？問題5までの？？追加必要？

ok　次やってみようか。

それぞれ。

どの分野から優先して練習したいですか？

もしコーディングテストあったら、どういう順序でやっていくのがいいのかな？順序順で覚えていきたいけど。

crudの前にまず何か作るのあった？let items =[];のまず一番大事な箱を作って、次にDOMContentLoadedとかかな？これないと始まらないもんね。

ここへ色々関数へ入れていくっていう、その考え方もわかるようにしたい。

問題６はどこだ？day1？

最終的にこれ全部やっていればto do listの作成の考え方がわかるっていうふうにしたいね。

でもやっぱ時間ない時あるから、ここだけやりたいとかあると思うから、細分化していると楽だよね。気持ち的にも。

サクッとできると時間ない時も取り組めるし。

forEachについて

forEach は「表示」や「副作用」で使います！

javascript

// ✅ DOM操作（表示）で使う
items.forEach(item => {
    const div = document.createElement('div');
    div.innerHTML = item.text;
    todoList.appendChild(div);  // 画面に追加
});

// ❌ returnが必要な処理では使わない
return items.forEach(...);  // undefinedが返る

これがよくわからんのよね。。要するにどこで使うんだ？表示の時だけって覚えれば、間違いなくなるかな？

/*

問題6: Todoオブジェクト作成

入力テキストから新しいTodoオブジェクトを作成

*/

function createTodo(text) {

  // id, text, completedを持つオブジェクトを返す

  return {

    id: Date.now,

    text: text,

    completed: false;

  }

}

// テスト

console.log(createTodo('買い物'));

// {id: 1234567890, text: '買い物', completed: false}

この練習したかったから助かる。嬉しいわ。

これで、addの時の練習になるよね。

これを追加すればいいのか。問題１と組み合わせる感じかな？

Date.nowってあっている？

表示はまだなさそうかな。

📚 分野別の整理案

Day1: CRUD基本

配列への追加（オブジェクト作成含む）

IDで削除

IDで更新

検索フィルター

条件カウント

上記は今までやったもの？問題5までの？？追加必要？

ok　次やってみようか。

それぞれ。

どの分野から優先して練習したいですか？

もしコーディングテストあったら、どういう順序でやっていくのがいいのかな？順序順で覚えていきたいけど。

crudの前にまず何か作るのあった？let items =[];のまず一番大事な箱を作って、次にDOMContentLoadedとかかな？これないと始まらないもんね。

ここへ色々関数へ入れていくっていう、その考え方もわかるようにしたい。

問題６はどこだ？day1？

最終的にこれ全部やっていればto do listの作成の考え方がわかるっていうふうにしたいね。

でもやっぱ時間ない時あるから、ここだけやりたいとかあると思うから、細分化していると楽だよね。気持ち的にも。

サクッとできると時間ない時も取り組めるし。

forEachについて

forEach は「表示」や「副作用」で使います！

// ✅ DOM操作（表示）で使う
items.forEach(item => {
    const div = document.createElement('div');
    div.innerHTML = item.text;
    todoList.appendChild(div);  // 画面に追加
});

// ❌ returnが必要な処理では使わない
return items.forEach(...);  // undefinedが返る

これがよくわからんのよね。。要するにどこで使うんだ？表示の時だけって覚えれば、間違いなくなるかな？



