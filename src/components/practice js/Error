エラーハンドリングの条件について
Q: (!str || str.length === 0) と (!str) の違いと使い分け
A: この条件の違いと使い分けを明確にします：
// 1. !str だけのチェック
if (!str) return "";
// 以下の場合に true になる:
// - str === "" (空文字列)
// - str === null
// - str === undefined
// - str === 0
// - str === false

// 2. より具体的なチェック
if (!str || str.length === 0) return "";
// より明示的に空文字列もチェック（冗長だが意図が明確）
実際には !str だけで空文字列も含めてチェックできます。
しかし、多くの場合は明示性のために str.length === 0 も追加されています。

これは次のような状況での安全策でもあります：
const str = 0; // 数値
if (!str) { /* true になる */ }
if (str.length === 0) { /* エラーになる (0には.lengthがない) */ }

// そのため安全のために型チェックを追加することも
if (typeof str === 'string' && str.length === 0) { /* 文字列型で空の場合のみ */ }
コーディングテストでは、一般的には if (!str || str.length === 0) の形式で書くと安全です。



---------

7. テストコードとは
ここでのテストコードとは、あなたの関数が正しく動作するかを確認するためのコードです。
問題文に書かれている try { ... } catch { ... } の部分が、あなたの解答をテストするコードになります。
これにより、正の数、0、負の数それぞれのケースで関数がどう動作するかを確認できます。👈

----------
8. まとめ
エラー処理のパターンを整理すると：

エラーをスローする側（関数）：
function isPositive(num) {
  if (num > 0) return "YES";
  if (num === 0) throw new Error("Zero Error");
  throw new Error("Negative Error");
}

エラーをキャッチする側（呼び出し元）：
try {
  const result = isPositive(num);
  console.log(result);  // エラーがなければ実行される
} catch (e) {
  console.log(e.message);  // エラーがあればこちらが実行される
}


この仕組みはReactでのデータフェッチの際のエラー処理など、多くの場面で使われます。


-----------
throw と console.error の違い

console.error("メッセージ"):

コンソールに赤字でエラーメッセージを表示するだけ
プログラムは停止せず、次の行も実行される


throw new Error("メッセージ"):

実際にエラーを発生させ、プログラムの実行を中断する
呼び出し元で try-catch を使わないとプログラムが停止する

---
throw と try-catch について
throw を使うのは、関数の実行を中断し、エラーを発生させるときです。このエラーは try-catch ブロックでキャッチできます：
try {
  // エラーが発生する可能性のあるコード
  const result = isPositive(0); // ここでエラーが発生
  console.log(result); // エラーが発生したらこの行は実行されない
} catch (e) {
  // エラーが発生した場合の処理
  console.log(e.message); // "Zero Error" が表示される
}
テストコードでは、関数を try ブロック内で実行し、エラーが発生した場合に catch ブロックでエラーメッセージを表示しています。

-----
なぜ if ではなく throw を使うのか
この問題では、特定の条件（0や負の数）でエラーを発生させることが要件です。エラーを発生させることで：

処理を即座に中断できる
エラーの情報（メッセージなど）を伝えられる
try-catch を使って、エラーを適切に処理できる

エラー処理は、期待しない入力や状態に対して適切に対応するために重要なプログラミングの概念です。
🔺つまり重要でないのをあえて渡した時にどうなるのか実験用のもの
console.logとはたいなるものか

ーーーーー
4. Error オブジェクトと new キーワード
new Error("メッセージ") は Error オブジェクトのインスタンスを作成します。
これは  の組み込みオブジェクトで、エラーの情報（メッセージなど）を持ちます。
new キーワードは Set や Date などのオブジェクトと同様に、新しいインスタンスを作るために使います。

ーーーーー
5. try-catch と throw の関係

try-catch は「エラーが発生するかもしれないコード」を実行し、
エラーが発生した場合に処理する仕組みです
throw はエラーを意図的に発生させる命令です

両者は独立していますが、一般的には：

関数内で throw を使ってエラーを発生させる
その関数を呼び出す側で try-catch を使ってエラーを処理する


-------
function isPositive(num) {
  if (num > 0) {
    return "YES";
  } else if (num === 0) {
    throw new Error("Zero Error");
  } else {
    throw new Error("Negative Error");
  }
}

// テスト
try {
  console.log(isPositive(5)); // "YES"
} catch (e) {
  console.log(e.message);
}

try {
  console.log(isPositive(0)); // Zero Error
} catch (e) {
  console.log(e.message);
}

try {
  console.log(isPositive(-5)); // Negative Error
} catch (e) {
  console.log(e.message);
}

6. 成功した場合の動作
try {
  const result = isPositive(5);  // エラーは発生せず、result に "YES" が入る
  console.log(result);  // "YES" が表示される
} catch (e) {
  // エラーが発生しないのでこのブロックは実行されない
  console.log(e.message);  
}
正常に実行される場合は、try ブロックの中の処理がすべて実行され、catch ブロックは実行されません。
