// JavaScript Step1: データフェッチ基礎
// 1つずつコメントアウトを解除して練習

// === 問題1: サンプルデータの準備 ===

// 問題1-1: サンプルデータを作成
/*
const sampleData = [
    { id: 1, name: '田中太郎', email: 'tanaka@example.com', department: '営業部' },
    { id: 2, name: '佐藤花子', email: 'sato@example.com', department: '開発部' },
    { id: 3, name: '鈴木一郎', email: 'suzuki@example.com', department: '人事部' },
    { id: 4, name: '高橋美咲', email: 'takahashi@example.com', department: 'マーケティング部' }
];
*/

// テスト用（必要に応じて解除）
/*
document.addEventListener('DOMContentLoaded', function() {
    console.log('サンプルデータ:', sampleData);
});
*/

// === 問題2: データ表示の基礎 ===

// 問題2-1: テーブルにデータを1行追加する関数
/*
function addRowToTable(person) {
    const tableBody = document.getElementById('tableBody');
    
    const row = document.createElement('tr');
    row.innerHTML = `
        <td>${person.id}</td>
        <td>${person.name}</td>
        <td>${person.email}</td>
        <td>${person.department}</td>
        <td>
            <button class="edit-btn">編集</button>
            <button class="delete-btn">削除</button>
        </td>
    `;
    
    tableBody.appendChild(row);
}
*/

// テスト用（必要に応じて解除）
/*
document.addEventListener('DOMContentLoaded', function() {
    addRowToTable(sampleData[0]);
    console.log('1行追加完了');
});
*/

// 問題2-2: 全データをテーブルに表示
/*
function displayAllData() {
    const tableBody = document.getElementById('tableBody');
    tableBody.innerHTML = ''; // 既存データをクリア
    
    sampleData.forEach(person => {
        addRowToTable(person);
    });
}
*/

// テスト用（必要に応じて解除）
/*
document.addEventListener('DOMContentLoaded', function() {
    displayAllData();
    console.log('全データ表示完了');
});
*/

// === 問題3: 外部APIからのデータフェッチ ===

// 問題3-1: JSONPlaceholder APIからユーザーデータを取得
/*
async function fetchUserData() {
    try {
        const response = await fetch('https://jsonplaceholder.typicode.com/users');
        const users = await response.json();
        
        // APIデータを我々の形式に変換
        const formattedData = users.slice(0, 5).map(user => ({
            id: user.id,
            name: user.name,
            email: user.email,
            department: user.company.name
        }));
        
        return formattedData;
    } catch (error) {
        console.error('データ取得エラー:', error);
        return [];
    }
}
*/

// テスト用（必要に応じて解除）
/*
document.addEventListener('DOMContentLoaded', async function() {
    const apiData = await fetchUserData();
    console.log('フェッチしたデータ:', apiData);
    
    if (apiData.length > 0) {
        window.currentData = apiData;
        
        const tableBody = document.getElementById('tableBody');
        tableBody.innerHTML = '';
        apiData.forEach(person => {
            addRowToTable(person);
        });
        console.log('APIデータ表示完了');
    }
});
*/

// === 問題4: ローディング表示 ===

// 問題4-1: ローディング表示の制御
/*
function showLoading() {
    document.getElementById('loading').style.display = 'block';
    document.getElementById('dataTable').style.display = 'none';
}

function hideLoading() {
    document.getElementById('loading').style.display = 'none';
    document.getElementById('dataTable').style.display = 'table';
}
*/

// テスト用（必要に応じて解除）
/*
document.addEventListener('DOMContentLoaded', function() {
    console.log('ローディングテスト開始');
    showLoading();
    
    setTimeout(() => {
        hideLoading();
        console.log('ローディングテスト完了');
    }, 2000);
});
*/

// === 問題5: 初期化処理 ===

// 問題5-1: データをテーブルに表示する関数
/*
function displayDataInTable(data) {
    const tableBody = document.getElementById('tableBody');
    tableBody.innerHTML = '';
    
    data.forEach(person => {
        addRowToTable(person);
    });
}
*/

// 問題5-2: ページ読み込み時の処理
/*
async function init() {
    showLoading();
    
    setTimeout(async () => {
        const data = await fetchUserData();
        
        if (data.length > 0) {
            window.currentData = data;
            displayDataInTable(data);
        } else {
            showError();
        }
        
        hideLoading();
    }, 1000);
}
*/

// === 問題6: エラーハンドリング ===

// 問題6-1: エラー表示
/*
function showError() {
    document.getElementById('error').style.display = 'block';
    document.getElementById('dataTable').style.display = 'none';
}
*/

// === 問題7: ページ読み込み時の実行 ===

// 問題7-1: DOMContentLoadedイベントで初期化
/*
document.addEventListener('DOMContentLoaded', init);
*/

// === 進捗確認用 ===
document.addEventListener('DOMContentLoaded', function() {
    console.log('📚 問題を1つずつ解除してください');
});

// === 模範解答（練習後に確認）===
/*
const sampleData = [
    { id: 1, name: '田中太郎', email: 'tanaka@example.com', department: '営業部' },
    { id: 2, name: '佐藤花子', email: 'sato@example.com', department: '開発部' },
    { id: 3, name: '鈴木一郎', email: 'suzuki@example.com', department: '人事部' },
    { id: 4, name: '高橋美咲', email: 'takahashi@example.com', department: 'マーケティング部' }
];

function addRowToTable(person) {
    const tableBody = document.getElementById('tableBody');
    
    const row = document.createElement('tr');
    row.innerHTML = `
        <td>${person.id}</td>
        <td>${person.name}</td>
        <td>${person.email}</td>
        <td>${person.department}</td>
        <td>
            <button class="edit-btn">編集</button>
            <button class="delete-btn">削除</button>
        </td>
    `;
    
    tableBody.appendChild(row);
}

function displayAllData() {
    const tableBody = document.getElementById('tableBody');
    tableBody.innerHTML = '';
    
    sampleData.forEach(person => {
        addRowToTable(person);
    });
}

async function fetchUserData() {
    try {
        const response = await fetch('https://jsonplaceholder.typicode.com/users');
        const users = await response.json();
        
        const formattedData = users.slice(0, 5).map(user => ({
            id: user.id,
            name: user.name,
            email: user.email,
            department: user.company.name
        }));
        
        return formattedData;
    } catch (error) {
        console.error('データ取得エラー:', error);
        return [];
    }
}

function showLoading() {
    document.getElementById('loading').style.display = 'block';
    document.getElementById('dataTable').style.display = 'none';
}

function hideLoading() {
    document.getElementById('loading').style.display = 'none';
    document.getElementById('dataTable').style.display = 'table';
}

function showError() {
    document.getElementById('error').style.display = 'block';
    document.getElementById('dataTable').style.display = 'none';
}

function displayDataInTable(data) {
    const tableBody = document.getElementById('tableBody');
    tableBody.innerHTML = '';
    
    data.forEach(person => {
        addRowToTable(person);
    });
}

async function init() {
    showLoading();
    
    setTimeout(async () => {
        const data = await fetchUserData();
        
        if (data.length > 0) {
            window.currentData = data;
            displayDataInTable(data);
        } else {
            showError();
        }
        
        hideLoading();
    }, 1000);
}

document.addEventListener('DOMContentLoaded', init);
*/

// === 模範解答（練習後に確認）===
/*
const sampleData = [
    { id: 1, name: '田中太郎', email: 'tanaka@example.com', department: '営業部' },
    { id: 2, name: '佐藤花子', email: 'sato@example.com', department: '開発部' },
    { id: 3, name: '鈴木一郎', email: 'suzuki@example.com', department: '人事部' },
    { id: 4, name: '高橋美咲', email: 'takahashi@example.com', department: 'マーケティング部' }
];

function addRowToTable(person) {
    const tableBody = document.getElementById('tableBody');
    
    const row = document.createElement('tr');
    row.innerHTML = `
        <td>${person.id}</td>
        <td>${person.name}</td>
        <td>${person.email}</td>
        <td>${person.department}</td>
        <td>
            <button class="edit-btn">編集</button>
            <button class="delete-btn">削除</button>
        </td>
    `;
    
    tableBody.appendChild(row);
}

function displayAllData() {
    const tableBody = document.getElementById('tableBody');
    tableBody.innerHTML = '';
    
    sampleData.forEach(person => {
        addRowToTable(person);
    });
}

async function fetchUserData() {
    try {
        const response = await fetch('https://jsonplaceholder.typicode.com/users');
        const users = await response.json();
        
        const formattedData = users.slice(0, 5).map(user => ({
            id: user.id,
            name: user.name,
            email: user.email,
            department: user.company.name
        }));
        
        return formattedData;
    } catch (error) {
        console.error('データ取得エラー:', error);
        return [];
    }
}

function showLoading() {
    document.getElementById('loading').style.display = 'block';
    document.getElementById('dataTable').style.display = 'none';
}

function hideLoading() {
    document.getElementById('loading').style.display = 'none';
    document.getElementById('dataTable').style.display = 'table';
}

function showError() {
    document.getElementById('error').style.display = 'block';
    document.getElementById('dataTable').style.display = 'none';
}

function displayDataInTable(data) {
    const tableBody = document.getElementById('tableBody');
    tableBody.innerHTML = '';
    
    data.forEach(person => {
        addRowToTable(person);
    });
}

async function init() {
    showLoading();
    
    setTimeout(async () => {
        const data = await fetchUserData();
        
        if (data.length > 0) {
            window.currentData = data;
            displayDataInTable(data);
        } else {
            showError();
        }
        
        hideLoading();
    }, 1000);
}

document.addEventListener('DOMContentLoaded', init);
*/

// === 問題3: 外部APIからのデータフェッチ ===

// 問題3-1: JSONPlaceholder APIからユーザーデータを取得
/*
async function fetchUserData() {
    try {
        const response = await fetch('https://jsonplaceholder.typicode.com/users');
        const users = await response.json();
        
        // APIデータを我々の形式に変換
        const formattedData = users.slice(0, 5).map(user => ({
            id: user.id,
            name: user.name,
            email: user.email,
            department: user.company.name
        }));
        
        return formattedData;
    } catch (error) {
        console.error('データ取得エラー:', error);
        return [];
    }
}
*/

// === 問題4: ローディング表示 ===

// 問題4-1: ローディング表示の制御
/*
function showLoading() {
    document.getElementById('loading').style.display = 'block';
    document.getElementById('dataTable').style.display = 'none';
}

function hideLoading() {
    document.getElementById('loading').style.display = 'none';
    document.getElementById('dataTable').style.display = 'table';
}
*/

// === 問題5: 初期化処理 ===

// 問題5-1: ページ読み込み時の処理
/*
async function init() {
    showLoading();
    
    // 1秒後にデータを表示（ローディング確認のため）
    setTimeout(async () => {
        const data = await fetchUserData();
        
        if (data.length > 0) {
            // 取得したデータをグローバル変数に保存
            window.currentData = data;
            displayDataInTable(data);
        } else {
            showError();
        }
        
        hideLoading();
    }, 1000);
}
*/

// 問題5-2: データをテーブルに表示する関数
/*
function displayDataInTable(data) {
    const tableBody = document.getElementById('tableBody');
    tableBody.innerHTML = '';
    
    data.forEach(person => {
        addRowToTable(person);
    });
}
*/

// === 問題6: エラーハンドリング ===

// 問題6-1: エラー表示
/*
function showError() {
    document.getElementById('error').style.display = 'block';
    document.getElementById('dataTable').style.display = 'none';
}
*/

// === 問題7: ページ読み込み時の実行 ===

// 問題7-1: DOMContentLoadedイベントで初期化
/*
document.addEventListener('DOMContentLoaded', init);
*/

// === 模範解答（練習後に確認）===
/*
const sampleData = [
    { id: 1, name: '田中太郎', email: 'tanaka@example.com', department: '営業部' },
    { id: 2, name: '佐藤花子', email: 'sato@example.com', department: '開発部' },
    { id: 3, name: '鈴木一郎', email: 'suzuki@example.com', department: '人事部' },
    { id: 4, name: '高橋美咲', email: 'takahashi@example.com', department: 'マーケティング部' }
];

function addRowToTable(person) {
    const tableBody = document.getElementById('tableBody');
    
    const row = document.createElement('tr');
    row.innerHTML = `
        <td>${person.id}</td>
        <td>${person.name}</td>
        <td>${person.email}</td>
        <td>${person.department}</td>
        <td>
            <button class="edit-btn">編集</button>
            <button class="delete-btn">削除</button>
        </td>
    `;
    
    tableBody.appendChild(row);
}

function displayAllData() {
    const tableBody = document.getElementById('tableBody');
    tableBody.innerHTML = '';
    
    sampleData.forEach(person => {
        addRowToTable(person);
    });
}

async function fetchUserData() {
    try {
        const response = await fetch('https://jsonplaceholder.typicode.com/users');
        const users = await response.json();
        
        const formattedData = users.slice(0, 5).map(user => ({
            id: user.id,
            name: user.name,
            email: user.email,
            department: user.company.name
        }));
        
        return formattedData;
    } catch (error) {
        console.error('データ取得エラー:', error);
        return [];
    }
}

function showLoading() {
    document.getElementById('loading').style.display = 'block';
    document.getElementById('dataTable').style.display = 'none';
}

function hideLoading() {
    document.getElementById('loading').style.display = 'none';
    document.getElementById('dataTable').style.display = 'table';
}

function showError() {
    document.getElementById('error').style.display = 'block';
    document.getElementById('dataTable').style.display = 'none';
}

function displayDataInTable(data) {
    const tableBody = document.getElementById('tableBody');
    tableBody.innerHTML = '';
    
    data.forEach(person => {
        addRowToTable(person);
    });
}

async function init() {
    showLoading();
    
    setTimeout(async () => {
        const data = await fetchUserData();
        
        if (data.length > 0) {
            window.currentData = data;
            displayDataInTable(data);
        } else {
            showError();
        }
        
        hideLoading();
    }, 1000);
}

document.addEventListener('DOMContentLoaded', init);
*/

document.addEventListener('DOMContentLoaded', async function() {

    const apiData = await fetchUserData();

    console.log('フェッチしたデータ:', apiData);

    

    if (apiData.length > 0) {

        window.currentData = apiData;

        

        const tableBody = document.getElementById('tableBody');

        tableBody.innerHTML = '';

        apiData.forEach(person => {

            addRowToTable(person);

        });

        console.log('APIデータ表示完了');

    }

});

このwindow .currentDataって何？どこのことだ？これやったことないぞ？必須なの？

フェッチしたデータを、要素にあとはfoeEachで入れる流れか。

